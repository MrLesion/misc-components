/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/wishlist/index.js":
/*!*******************************!*\
  !*** ./src/wishlist/index.js ***!
  \*******************************/
/***/ (() => {

eval("ï»¿const wishlist = {\r\n    settings:{\r\n        wishlistStoreKey: 'wishlist.ids',\r\n        productsStoreKey: 'wishlist.products'\r\n    },\r\n    init: () => {\r\n        wishlist.buildList().then(() =>{\r\n            wishlist.bindEvents();\r\n            wishlist.reflow();\r\n        });\r\n        \r\n    },\r\n    store: {\r\n        get: () => {\r\n            const localStore = localStorage.getItem(wishlist.settings.wishlistStoreKey);\r\n            if (localStore !== null) {\r\n                return JSON.parse(localStore);\r\n            }\r\n            return [];\r\n        },\r\n        set: (jsonObj) => {\r\n            localStorage.setItem(wishlist.settings.wishlistStoreKey, JSON.stringify(jsonObj));\r\n            wishlist.reflow();\r\n        },\r\n        add: (favoriteId) => {\r\n            const localStore = wishlist.store.get();\r\n            if (localStore.indexOf(favoriteId) === -1) {\r\n                localStore.push(favoriteId);\r\n                wishlist.products.updateProductFeed(favoriteId);\r\n                wishlist.store.set(localStore);\r\n            }\r\n        },\r\n        remove: (favoriteId) =>{\r\n            let localStore = wishlist.store.get();\r\n            if (localStore.indexOf(favoriteId) > -1) {\r\n                localStore = localStore.filter((id) =>{\r\n                    return id !== favoriteId;\r\n                });\r\n                wishlist.store.set(localStore);\r\n            }\r\n        }\r\n    },\r\n    buildList: async (categoryId = 'smartphones') =>{\r\n        const grid = document.querySelector('.grid');\r\n        const categories = document.querySelector('.categories');\r\n        const header = document.querySelector('.product-header');\r\n        const categoriesReq = fetch('https://dummyjson.com/products/categories').then((response) => response.json());\r\n        const productsReq = fetch(`https://dummyjson.com/products/category/${categoryId}`).then(( response) => response.json());\r\n        \r\n        return Promise.all([categoriesReq, productsReq]).then((json) =>{\r\n            grid.innerHTML = '';\r\n            categories.innerHTML = '';\r\n            json[0].forEach((category) =>{\r\n                const htmlString = `<div class=\"category-item ${categoryId === category ? 'selected' : ''}\">\r\n                        <a href=\"#\" class=\"js-change-category\" data-category-id=\"${category}\">\r\n                        ${category.toUpperCase()}\r\n                        </a>\r\n                      </div>`;\r\n                var doc = new DOMParser().parseFromString(htmlString, \"text/html\");\r\n                categories.appendChild(doc.querySelector('.category-item '));\r\n            });\r\n            json[1].products.forEach((product) => {\r\n                const htmlString = `<div class=\"grid-item\">\r\n                        <img loading=\"lazy\" src=\"${product.thumbnail}\" alt=\"${product.title}\">\r\n                        <h4>${product.title}</h4>\r\n                        <p>${product.description}</p>\r\n                        <p class=\"price\">${new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'DKK' }).format(product.price)}</p>\r\n                        <a href=\"#\" class=\"js-wishlist-btn wishlist-btn\" data-favorite-id=\"${product.id}\"></a>\r\n                      </div>`;\r\n                var doc = new DOMParser().parseFromString(htmlString, \"text/html\");\r\n                grid.appendChild(doc.querySelector('.grid-item '));\r\n            } );\r\n            header.textContent = categoryId.toUpperCase();\r\n        })\r\n    },\r\n    bindEvents: () => {\r\n        \r\n        const listButton = document.querySelector('.js-list-btn');\r\n        const closeButton = document.querySelector('.js-close-btn');\r\n\r\n        listButton.addEventListener('click', (event) =>{\r\n            wishlist.openMenu();\r\n        });\r\n        closeButton.addEventListener('click', (event) =>{\r\n            wishlist.closeMenu();\r\n        });\r\n    },\r\n\r\n    openMenu: () => {\r\n        const main = document.querySelector('.main');\r\n        document.querySelector('.sidenav').style.width = '25vw';\r\n        main.style.width = main.offsetWidth + 'px';\r\n        main.style.marginLeft = '25vw';\r\n        \r\n        const overlay = document.createElement('div');\r\n        overlay.classList.add('overlay');\r\n        overlay.onclick = () =>{\r\n           wishlist.closeMenu();\r\n        }\r\n        document.body.style.overflowX = 'hidden';\r\n        document.body.appendChild(overlay);\r\n        setTimeout(() =>{\r\n            overlay.style.opacity = 1;\r\n        }, 50);\r\n    },\r\n    closeMenu:() =>{\r\n        const main = document.querySelector('.main');\r\n        document.querySelector('.sidenav').style.width = '0';\r\n        main.style.width = '100%';\r\n        main.style.marginLeft = '0';\r\n        const overlay = document.querySelector('.overlay');\r\n\r\n        overlay.addEventListener('transitionend', () => {\r\n            document.body.style.overflowX = '';\r\n            document.body.removeChild(overlay);\r\n        }, false);\r\n\r\n        overlay.style.opacity = 0;\r\n        \r\n    },\r\n    reflow: () =>{\r\n        const wishlistButtons = document.querySelectorAll('.js-wishlist-btn');\r\n        const categoryButtons = document.querySelectorAll('.js-change-category');\r\n        const data = wishlist.store.get();\r\n        wishlistButtons.forEach((wishlistButton) => {\r\n            const favoriteId = parseInt(wishlistButton.dataset.favoriteId);\r\n            wishlistButton.classList.remove('is-remove', 'is-add');\r\n            if(data.indexOf(favoriteId) > -1){\r\n                wishlistButton.classList.add('is-remove', 'is-loaded');\r\n            } else{\r\n                wishlistButton.classList.add('is-add', 'is-loaded');\r\n            }\r\n\r\n            wishlistButton.addEventListener('click', (event) => {\r\n                event.preventDefault();\r\n                const favoriteId = parseInt(event.target.dataset.favoriteId);\r\n                if(event.target.classList.contains('is-add')){\r\n                    wishlist.store.add(favoriteId);\r\n                } else if(event.target.classList.contains('is-remove')){\r\n                    wishlist.store.remove(favoriteId);\r\n                    wishlist.products.store.remove(favoriteId);\r\n                }\r\n\r\n            })\r\n        });\r\n\r\n        categoryButtons.forEach((categoryButton) =>{\r\n            categoryButton.addEventListener('click', (event) =>{\r\n                event.preventDefault();\r\n                const categoryId = event.target.dataset.categoryId\r\n                wishlist.buildList(categoryId).then(() =>{\r\n                    wishlist.reflow();\r\n                });\r\n            });\r\n        })\r\n\r\n        \r\n        \r\n        const productData = wishlist.products.store.get();\r\n        wishlist.products.build(productData);\r\n    },\r\n    products: {\r\n        store: {\r\n            get: () => {\r\n                const localStore = localStorage.getItem(wishlist.settings.productsStoreKey);\r\n                if (localStore !== null) {\r\n                    return JSON.parse(localStore);\r\n                }\r\n                return [];\r\n            },\r\n            set: (jsonObj) => {\r\n                localStorage.setItem(wishlist.settings.productsStoreKey, JSON.stringify(jsonObj));\r\n                wishlist.products.build(jsonObj);\r\n            },\r\n            add: (product) => {\r\n                const localStore = wishlist.products.store.get();\r\n                if (localStore.filter(p => p.id === product.id).length === 0) {\r\n                    localStore.push(product);\r\n                    wishlist.products.store.set(localStore);\r\n                }\r\n            },\r\n            remove: (productId) =>{\r\n                let localStore = wishlist.products.store.get();\r\n                if (localStore.filter(p => p.id === productId).length > 0) {\r\n                    localStore = localStore.filter((p) =>{\r\n                        console.log(p.id, productId);\r\n                        return p.id !== productId;\r\n                    });\r\n                    wishlist.products.store.set(localStore);\r\n                }\r\n            }\r\n        },\r\n        updateProductFeed: (id) =>{\r\n            fetch(`https://dummyjson.com/products/${id}`)\r\n                .then((response) => response.json())\r\n                .then((json) => {\r\n                    wishlist.products.store.add(json);\r\n                    \r\n                });\r\n        },\r\n        build: (products) =>{\r\n            const oldList = document.querySelector('.list');\r\n            const list = document.querySelector('.list-elem');\r\n            list.innerHTML = '';\r\n            products.forEach((product) =>{\r\n                const li = document.createElement('li');\r\n                const input = document.createElement('input');\r\n                const label = document.createElement('label');\r\n                input.id = `addFavoriteToCart-${product.id}`;\r\n                input.className = `js-add-favorite-to-cart-input`;\r\n                input.type = 'checkbox';\r\n                input.value = product.id;\r\n                input.onchange = wishlist.products.addToCartCheck;\r\n                label.htmlFor = `addFavoriteToCart-${product.id}`;\r\n                label.textContent =  `ID #${product.id} - ${product.title}`;\r\n                li.appendChild(input);\r\n                li.appendChild(label);\r\n                \r\n                list.appendChild(li);\r\n            });\r\n        },\r\n        addToCartCheck: () =>{\r\n            const addToCartBtn = document.querySelector('.js-add-to-cart');\r\n            const inputs = document.querySelectorAll('.js-add-favorite-to-cart-input');\r\n            const hasChecked = Array.from(inputs).filter(i => i.checked === true).length > 0;\r\n            addToCartBtn.disabled = !hasChecked;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nwindow.document.addEventListener('DOMContentLoaded', () => {\r\n    wishlist.init();\r\n});\n\n//# sourceURL=webpack://components/./src/wishlist/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/wishlist/index.js"]();
/******/ 	
/******/ })()
;